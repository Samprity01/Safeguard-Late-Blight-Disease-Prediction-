import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

df=pd.read_csv('TOMATO.csv')

df.head()
df.shape
x=df.iloc[:,0:-1]
y=df.iloc[:,-1]
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
print(x_train.shape)
print(y_train.shape)
rf=RandomForestClassifier(max_samples=0.75,random_state=42)
rf.fit(x_train,y_train)
y_pred=rf.fit(x_test)
print(accuracy_score(y_test,y_pred))
from sklearn.model_selection import cross_val_score
np.mean(cross_val_score(RandomForestClassifier(),x,y,cv=10,scoring='accuracy'))














#code of KNN
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('TOMATO.csv')
df.head()

df.shape

from sklearn.model_selection import train_test_split
x_train,y_train,x_test,y_test=train_test_split(df.iloc[:,1:],df.iloc[:,0],test_size=0.2,random_state=2)

x_train.head()
x_train.shape

y_train.head()
y_train.shape

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

x_train
x_train.shape

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifer(n_neighbors=3)

knn.fit(x_train,y_train)

from sklearn.metrics import accuracy_score,classification_report
y_pred=knn.predict(x_test)
print(accuracy_score(y_test,y_pred))

print(classification_report(y_test,y_pred))

print(f1_score(y_test,y_pred))








